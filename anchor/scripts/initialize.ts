// FILE: anchor/scripts/initialize.ts
import * as anchor from "@coral-xyz/anchor";
import { Program } from "@coral-xyz/anchor";
import { Anaheim } from "../target/types/anaheim";
import { resolve } from "path";
import { readFileSync } from "fs";
import os from "os";

// Helper function to load a JSON file from a path.
function loadJson(jsonPath: string): any {
    const fullPath = resolve(jsonPath);
    return JSON.parse(readFileSync(fullPath, "utf-8"));
}

// Helper function to load a keypair from a file path.
function loadKeypair(keypairPath: string): anchor.web3.Keypair {
    const keypairData = loadJson(keypairPath);
    return anchor.web3.Keypair.fromSecretKey(new Uint8Array(keypairData));
}

async function initialize() {
    // 1. Manually set the connection to Devnet.
    const connection = new anchor.web3.Connection("https://api.devnet.solana.com", "confirmed");

    // ===================================================================
    // FIX #1: THE TYPO IS CORRECTED.
    // `os.homedhomedir()` has been corrected to `os.homedir()`.
    // ===================================================================
    // 2. Manually load your wallet from the default location.
    const walletKeypair = loadKeypair(os.homedir() + "/.config/solana/id.json");
    const wallet = new anchor.Wallet(walletKeypair);

    // 3. Manually create the provider.
    const provider = new anchor.AnchorProvider(connection, wallet, { commitment: "confirmed" });
    anchor.setProvider(provider);

    // ===================================================================
    // FIX #2: THE CONSTRUCTOR AND IDL LOGIC ARE CORRECTED.
    // This is the definitive fix for the main crash.
    // ===================================================================

    // 4. Load the IDL from its JSON file.
    const idl = loadJson("./anchor/target/idl/anaheim.json");

    // 5. Get the TRUE Program ID from the keypair file generated by `anchor build`.
    const programKeypair = loadKeypair("./anchor/target/deploy/anaheim-keypair.json");
    const programId = programKeypair.publicKey;

    // 6. Manually set the address property on the IDL object. This is CRITICAL.
    idl.address = programId.toBase58();

    // 7. Create the program instance using the CORRECT two-argument constructor.
    const program = new Program<Anaheim>(idl, provider);

    // Load your permanent data account keypair.
    const anaheimAccount = loadKeypair("./anchor/anaheim-account-key.json");

    console.log("================================================================");
    console.log("Initializing account on Devnet...");
    console.log("Using TRUE Program ID:", program.programId.toBase58());
    console.log("Data Account Public Key:", anaheimAccount.publicKey.toBase58());
    console.log("================================================================");

    const accountInfo = await provider.connection.getAccountInfo(anaheimAccount.publicKey);
    if (accountInfo !== null) {
        console.log("SUCCESS: Account already exists on Devnet. No action needed.");
        return;
    }

    console.log("Account not found on Devnet. Sending initialize transaction...");

    const tx = await program.methods
        .initialize()
        .accounts({
            anaheim: anaheimAccount.publicKey,
            payer: provider.wallet.publicKey,
        })
        .signers([anaheimAccount])
        .rpc();

    console.log("Transaction successful with signature:", tx);
    console.log("SUCCESS: Account has been initialized on Devnet.");
}

initialize().then(
    () => console.log('Script finished successfully.'),
    (err) => {
        console.error('Script failed:', err);
        process.exit(1);
    }
);